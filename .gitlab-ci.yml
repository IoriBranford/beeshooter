# LOVE Multiplatform GitLab CI

# Fill in the project info
variables:
        PROJECT_TITLE: "Honey Guardian"
        PROJECT_TITLE_NOSPACE: Honey_Guardian
        GIT_DEPTH: "1"
        GIT_SUBMODULE_STRATEGY: recursive

# Fill in the demo info if providing a demo
.demo:
  <<: &demo
    rules:
      - if: '$ONLY_JOB != null && $ONLY_JOB != $CI_JOB_NAME'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "web"'
      - if: '$CI_COMMIT_TAG =~ /demo/'
  variables:
    <<: &demo-variables
      PROJECT_TITLE: "BeeShooter Demo"
      PROJECT_TITLE_NOSPACE: "Bee_Shooter_Demo"
      GAME_TYPE: demo
  artifacts:
    <<: &demo-artifacts-exclude
      exclude:
        - "**/libsteam_api.so"
        - "**/luasteam.so"
        - "**/steam_api*.dll"
        - "**/luasteam.dll"

.full:
  <<: &full
    rules:
      - if: '$ONLY_JOB != null && $ONLY_JOB != $CI_JOB_NAME'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "web"'
      - if: '$CI_COMMIT_TAG != null && $CI_COMMIT_TAG !~ /demo/'

stages:
        - build

image: alpine:latest

before_script:
        - apk add --update git zip luajit

.debian:
        <<: &debian
                before_script:
                  - apt-get update
                  - apt-get install -y -qq git zip luajit

.build-data: &build-data
        stage: build
        script:
                - apk add wget xz
                - ./make-game.sh
        artifacts:
                name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-data"
                paths:
                        - "${GAME_ASSET}"

.build-linux: &build-linux
        <<: *debian
        stage: build
        image: debian:stretch-slim
        script:
                - apt-get install -y -qq file wget fuse libglib2.0-0 curl
                - ./make-linux.sh
        cache:
                key: "${CI_PROJECT_NAME}-linux-${ARCH}"
                paths:
                        - "love-${LOVE_VERSION}-${ARCH}.AppImage"
                        - "appimagetool"
                        - "*.deb"
        artifacts:
                <<: &build-linux-artifacts
                    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-linux-${ARCH}"
                    paths:
                        - ${PROJECT_TITLE_NOSPACE}-${ARCH}

.build-windows: &build-windows
        <<: *debian
        image: tianon/wine
        stage: build
        variables:
                ARCH_BITS: "64"
                <<: &build-windows-variables
                        ICO: "appicon.ico"
                        WINEPREFIX: "${CI_PROJECT_DIR}/.wine${ARCH_BITS}"
        script:
                - apt-get install -y -qq wget curl
                - ./make-windows.sh
        cache:
                key: "${CI_PROJECT_NAME}-win-${ARCH_BITS}"
                paths:
                        - "love-${LOVE_VERSION}-win${ARCH_BITS}"
                        - "bin"
                        - "rcedit-x64.exe"
                        - ".wine${ARCH_BITS}"
        artifacts:
                <<: &build-windows-artifacts
                    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-win-${ARCH_BITS}"
                    paths:
                        - "${PROJECT_TITLE}"

.build-dev-windows: &build-dev-windows
        stage: build
        variables:
                ARCH_BITS: "64"
        script:
                - apk add wget
                - ./make-dev-windows.sh
        cache:
                key: "${CI_PROJECT_NAME}-win-${ARCH_BITS}"
                paths:
                        - "love-*-win${ARCH_BITS}/"
                        - "bin"
        artifacts:
                name: "${CI_PROJECT_NAME}-dev-win-${ARCH_BITS}"
                paths:
                        - "${PROJECT_TITLE}"

.build-osx: &build-osx
        <<: *debian
        stage: build
        image: fzwoch/osxcross
        variables:
                CFBundleIdentifier: "${APPLICATION_ID}"
                <<: &build-osx-variables
                        NSHumanReadableCopyright: "${COPYRIGHT}"
                        INSTALL_NAME_TOOL: x86_64-apple-darwin12-install_name_tool
        script:
                - apt-get install -y -qq wget
                - ./make-macosx.sh
        cache:
                key: "${CI_PROJECT_NAME}-osx"
                paths:
                        - "love.app"
                        - "game-music-emu"
        artifacts:
                name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-osx"
                paths:
                        - "${PROJECT_TITLE}.app"

.build-android: &build-android
        <<: *debian
        stage: build
        image: ioribranford/build-love-android:11.4
        variables:
                GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
                PROJECT_TITLE: "Honey Soldier"
                PROJECT_TITLE_NOSPACE: Honey_Soldier
        script:
                - ./make-android.sh
        cache:
                key: "${CI_PROJECT_NAME}-android"
                paths:
                        - love-apk-src
                        - .gradle
        artifacts:
                name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-android"
                paths:
                        - "${PROJECT_TITLE_NOSPACE}*.apk"
                        - "${PROJECT_TITLE_NOSPACE}*.aab"

data:
        variables:
                GAME_ASSET: "${CI_PROJECT_NAME}.love"
        <<: *build-data
        <<: *full

linux-x86_64:
        <<: *build-linux
        <<: *full
        variables:
                ARCH: "x86_64"

.linux-i686:
        <<: *build-linux
        <<: *full
        image: i386/debian:stretch-slim
        variables:
                ARCH: "i686"

.linux-armhf:
        <<: *build-linux
        <<: *full
        image: arm32v7/debian:stretch-slim
        variables:
                ARCH: "armhf"

win-64:
        <<: *build-windows
        <<: *full

.win-32:
        <<: *build-windows
        <<: *full
        variables:
                <<: *build-windows-variables
                ARCH_BITS: "32"

osx:
        <<: *build-osx
        <<: *full

android:
        <<: *build-android
        <<: *full

.demo-data:
        variables:
                <<: *demo-variables
                GAME_ASSET: "${CI_PROJECT_NAME}-${GAME_TYPE}.love"
        <<: *build-data
        <<: *demo

.demo-linux-x86_64:
        <<: *build-linux
        <<: *demo
        variables:
                ARCH: "x86_64"
                <<: *demo-variables
        artifacts:
          <<: *build-linux-artifacts
          <<: *demo-artifacts-exclude

.demo-linux-i686:
        <<: *build-linux
        <<: *demo
        image: i386/debian:stretch-slim
        variables:
                ARCH: "i686"
                <<: *demo-variables
        artifacts:
          <<: *build-linux-artifacts
          <<: *demo-artifacts-exclude

.demo-linux-armhf:
        <<: *build-linux
        <<: *demo
        image: arm32v7/debian:stretch-slim
        variables:
                ARCH: "armhf"
                <<: *demo-variables

.demo-win-64:
        <<: *build-windows
        <<: *demo
        variables:
                <<: *demo-variables
                <<: *build-windows-variables
                ARCH_BITS: "64"
        artifacts:
          <<: *build-windows-artifacts
          <<: *demo-artifacts-exclude

.demo-win-32:
        <<: *build-windows
        <<: *demo
        variables:
                <<: *demo-variables
                <<: *build-windows-variables
                ARCH_BITS: "32"
        artifacts:
          <<: *build-windows-artifacts
          <<: *demo-artifacts-exclude

.demo-osx:
        <<: *build-osx
        <<: *demo
        variables:
                <<: *demo-variables
                <<: *build-osx-variables
                CFBundleIdentifier: "${APPLICATION_ID}demo"

.demo-android:
        <<: *build-android
        <<: *demo
        variables:
                <<: *demo-variables
                GAME_TYPE: "4kids-demo"
                APPLICATION_ID: "${APPLICATION_ID}demo"

.dev-win-64:
        <<: *build-dev-windows
        <<: *full

.dev-win-32:
        <<: *build-dev-windows
        <<: *full
        variables:
                ARCH_BITS: "32"
